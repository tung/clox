CFLAGS  = -Wall -Wextra -O1 -g -fsanitize=address -fno-omit-frame-pointer
LDFLAGS = -g -fsanitize=address

# rewrite src/*.c files in $(2) with $(1) suffix
# e.g. $(call build_pat,.o,src/foo.c src/bar.c) -> build/foo.o build/bar.o
build_pat = $(patsubst src/%,build/%$(1),$(patsubst %.c,%,$(2)))

c_srcs = $(wildcard src/*.c)
c_objs = $(call build_pat,.o,$(c_srcs))
c_deps = $(call build_pat,.d,$(c_srcs))

main_name      = clox
main_src       = src/main.c
main_link_dep  = $(call build_pat,.link.d,$(main_src))
test_srcs      = $(wildcard src/*_test.c)
test_link_deps = $(call build_pat,.link.d,$(test_srcs))
tests          = $(sort $(patsubst src/%.c,%,$(test_srcs)))

all: $(main_name) $(tests)

.PHONY: run
run: $(main_name)
	./$<

.PHONY: test
test: $(tests)
	./runtests.bash $(tests)

.PHONY: clean
clean:
	$(RM) $(main_name) $(tests) build/*.o

.PHONY: cleandeps
cleandeps:
	$(RM) build/*.d

.PHONY: cleanall
cleanall: clean cleandeps
	rmdir build

$(main_name): # autogenerated dependencies in $(main_link_dep) file
	$(CC) $(LDFLAGS) -o $@ $^

$(tests): %: # autogenerated dependencies in $(test_link_deps) files
	$(CC) $(LDFLAGS) -o $@ $^

# ensure build directory exists for objs and deps
$(c_objs): | build
$(c_deps): | build
$(main_link_dep): | build
$(test_link_deps): | build
build:
	mkdir -p $@

$(c_objs): build/%.o: src/%.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -c -o $@ $<

$(c_deps): build/%.d: src/%.c
	$(CPP) $(CPPFLAGS) -MM -MT $(@:.d=.o) -MT $@ -MF $@ $<

$(main_link_dep): $(c_deps)
	./linkrule.bash $(main_name) $(@:.link.d=.d) > $@

$(test_link_deps): build/%.link.d: $(c_deps)
	./linkrule.bash $* $(@:.link.d=.d) > $@

-include $(c_deps)
-include $(main_link_dep)
-include $(test_link_deps)
